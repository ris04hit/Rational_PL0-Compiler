functor Rational_PL0LrValsFun(structure Token : TOKEN)
 : sig structure ParserData : PARSER_DATA
       structure Tokens : Rational_PL0_TOKENS
   end
 = 
struct
structure ParserData=
struct
structure Header = 
struct
(* pi.yacc *)
open DataTypes


end
structure LrTable = Token.LrTable
structure Token = Token
local open LrTable in 
val table=let val actionRows =
"\
\\001\000\001\000\073\000\002\000\072\000\003\000\071\000\016\000\070\000\
\\017\000\069\000\018\000\068\000\019\000\081\000\020\000\080\000\
\\021\000\067\000\022\000\079\000\023\000\066\000\024\000\065\000\
\\033\000\064\000\043\000\063\000\049\000\062\000\000\000\
\\001\000\001\000\073\000\002\000\072\000\003\000\071\000\016\000\070\000\
\\017\000\069\000\018\000\068\000\021\000\067\000\023\000\066\000\
\\024\000\065\000\033\000\064\000\043\000\063\000\049\000\062\000\000\000\
\\001\000\001\000\073\000\002\000\072\000\003\000\071\000\016\000\070\000\
\\017\000\069\000\018\000\068\000\021\000\067\000\023\000\066\000\
\\024\000\065\000\043\000\063\000\049\000\062\000\000\000\
\\001\000\005\000\171\000\009\000\171\000\013\000\171\000\014\000\171\000\
\\015\000\171\000\046\000\171\000\049\000\171\000\000\000\
\\001\000\005\000\172\000\009\000\172\000\013\000\172\000\014\000\172\000\
\\015\000\172\000\046\000\172\000\049\000\172\000\000\000\
\\001\000\005\000\047\000\009\000\046\000\013\000\045\000\014\000\044\000\
\\015\000\043\000\046\000\042\000\049\000\041\000\000\000\
\\001\000\006\000\189\000\010\000\189\000\036\000\098\000\037\000\097\000\
\\038\000\096\000\039\000\095\000\040\000\094\000\041\000\093\000\
\\044\000\189\000\047\000\189\000\048\000\189\000\000\000\
\\001\000\006\000\190\000\010\000\190\000\044\000\190\000\047\000\190\000\
\\048\000\190\000\000\000\
\\001\000\006\000\191\000\010\000\191\000\044\000\191\000\047\000\191\000\
\\048\000\191\000\000\000\
\\001\000\006\000\192\000\010\000\192\000\044\000\192\000\047\000\192\000\
\\048\000\192\000\000\000\
\\001\000\006\000\193\000\010\000\193\000\044\000\193\000\047\000\193\000\
\\048\000\193\000\000\000\
\\001\000\006\000\194\000\010\000\194\000\044\000\194\000\047\000\194\000\
\\048\000\194\000\000\000\
\\001\000\006\000\195\000\010\000\195\000\044\000\195\000\047\000\195\000\
\\048\000\195\000\000\000\
\\001\000\006\000\196\000\010\000\196\000\034\000\092\000\035\000\091\000\
\\036\000\196\000\037\000\196\000\038\000\196\000\039\000\196\000\
\\040\000\196\000\041\000\196\000\044\000\196\000\047\000\196\000\
\\048\000\196\000\000\000\
\\001\000\006\000\197\000\010\000\197\000\034\000\197\000\035\000\197\000\
\\036\000\197\000\037\000\197\000\038\000\197\000\039\000\197\000\
\\040\000\197\000\041\000\197\000\044\000\197\000\047\000\197\000\
\\048\000\197\000\000\000\
\\001\000\006\000\198\000\010\000\198\000\034\000\198\000\035\000\198\000\
\\036\000\198\000\037\000\198\000\038\000\198\000\039\000\198\000\
\\040\000\198\000\041\000\198\000\044\000\198\000\047\000\198\000\
\\048\000\198\000\000\000\
\\001\000\006\000\199\000\010\000\199\000\034\000\199\000\035\000\199\000\
\\036\000\199\000\037\000\199\000\038\000\199\000\039\000\199\000\
\\040\000\199\000\041\000\199\000\044\000\199\000\047\000\199\000\
\\048\000\199\000\000\000\
\\001\000\006\000\200\000\010\000\200\000\034\000\200\000\035\000\200\000\
\\036\000\200\000\037\000\200\000\038\000\200\000\039\000\200\000\
\\040\000\200\000\041\000\200\000\044\000\200\000\047\000\200\000\
\\048\000\200\000\000\000\
\\001\000\006\000\201\000\010\000\201\000\024\000\090\000\025\000\089\000\
\\026\000\088\000\027\000\087\000\034\000\201\000\035\000\201\000\
\\036\000\201\000\037\000\201\000\038\000\201\000\039\000\201\000\
\\040\000\201\000\041\000\201\000\044\000\201\000\047\000\201\000\
\\048\000\201\000\000\000\
\\001\000\006\000\202\000\010\000\202\000\024\000\202\000\025\000\202\000\
\\026\000\202\000\027\000\202\000\028\000\086\000\029\000\085\000\
\\030\000\084\000\031\000\083\000\032\000\082\000\034\000\202\000\
\\035\000\202\000\036\000\202\000\037\000\202\000\038\000\202\000\
\\039\000\202\000\040\000\202\000\041\000\202\000\044\000\202\000\
\\047\000\202\000\048\000\202\000\000\000\
\\001\000\006\000\203\000\010\000\203\000\024\000\203\000\025\000\203\000\
\\026\000\203\000\027\000\203\000\028\000\086\000\029\000\085\000\
\\030\000\084\000\031\000\083\000\032\000\082\000\034\000\203\000\
\\035\000\203\000\036\000\203\000\037\000\203\000\038\000\203\000\
\\039\000\203\000\040\000\203\000\041\000\203\000\044\000\203\000\
\\047\000\203\000\048\000\203\000\000\000\
\\001\000\006\000\204\000\010\000\204\000\024\000\204\000\025\000\204\000\
\\026\000\204\000\027\000\204\000\028\000\086\000\029\000\085\000\
\\030\000\084\000\031\000\083\000\032\000\082\000\034\000\204\000\
\\035\000\204\000\036\000\204\000\037\000\204\000\038\000\204\000\
\\039\000\204\000\040\000\204\000\041\000\204\000\044\000\204\000\
\\047\000\204\000\048\000\204\000\000\000\
\\001\000\006\000\205\000\010\000\205\000\024\000\205\000\025\000\205\000\
\\026\000\205\000\027\000\205\000\028\000\086\000\029\000\085\000\
\\030\000\084\000\031\000\083\000\032\000\082\000\034\000\205\000\
\\035\000\205\000\036\000\205\000\037\000\205\000\038\000\205\000\
\\039\000\205\000\040\000\205\000\041\000\205\000\044\000\205\000\
\\047\000\205\000\048\000\205\000\000\000\
\\001\000\006\000\206\000\010\000\206\000\024\000\206\000\025\000\206\000\
\\026\000\206\000\027\000\206\000\028\000\086\000\029\000\085\000\
\\030\000\084\000\031\000\083\000\032\000\082\000\034\000\206\000\
\\035\000\206\000\036\000\206\000\037\000\206\000\038\000\206\000\
\\039\000\206\000\040\000\206\000\041\000\206\000\044\000\206\000\
\\047\000\206\000\048\000\206\000\000\000\
\\001\000\006\000\207\000\010\000\207\000\024\000\207\000\025\000\207\000\
\\026\000\207\000\027\000\207\000\028\000\207\000\029\000\207\000\
\\030\000\207\000\031\000\207\000\032\000\207\000\034\000\207\000\
\\035\000\207\000\036\000\207\000\037\000\207\000\038\000\207\000\
\\039\000\207\000\040\000\207\000\041\000\207\000\044\000\207\000\
\\047\000\207\000\048\000\207\000\000\000\
\\001\000\006\000\208\000\010\000\208\000\024\000\208\000\025\000\208\000\
\\026\000\208\000\027\000\208\000\028\000\208\000\029\000\208\000\
\\030\000\208\000\031\000\208\000\032\000\208\000\034\000\208\000\
\\035\000\208\000\036\000\208\000\037\000\208\000\038\000\208\000\
\\039\000\208\000\040\000\208\000\041\000\208\000\044\000\208\000\
\\047\000\208\000\048\000\208\000\000\000\
\\001\000\006\000\209\000\010\000\209\000\024\000\209\000\025\000\209\000\
\\026\000\209\000\027\000\209\000\028\000\209\000\029\000\209\000\
\\030\000\209\000\031\000\209\000\032\000\209\000\034\000\209\000\
\\035\000\209\000\036\000\209\000\037\000\209\000\038\000\209\000\
\\039\000\209\000\040\000\209\000\041\000\209\000\044\000\209\000\
\\047\000\209\000\048\000\209\000\000\000\
\\001\000\006\000\210\000\010\000\210\000\024\000\210\000\025\000\210\000\
\\026\000\210\000\027\000\210\000\028\000\210\000\029\000\210\000\
\\030\000\210\000\031\000\210\000\032\000\210\000\034\000\210\000\
\\035\000\210\000\036\000\210\000\037\000\210\000\038\000\210\000\
\\039\000\210\000\040\000\210\000\041\000\210\000\044\000\210\000\
\\047\000\210\000\048\000\210\000\000\000\
\\001\000\006\000\211\000\010\000\211\000\024\000\211\000\025\000\211\000\
\\026\000\211\000\027\000\211\000\028\000\211\000\029\000\211\000\
\\030\000\211\000\031\000\211\000\032\000\211\000\034\000\211\000\
\\035\000\211\000\036\000\211\000\037\000\211\000\038\000\211\000\
\\039\000\211\000\040\000\211\000\041\000\211\000\044\000\211\000\
\\047\000\211\000\048\000\211\000\000\000\
\\001\000\006\000\212\000\010\000\212\000\024\000\212\000\025\000\212\000\
\\026\000\212\000\027\000\212\000\028\000\212\000\029\000\212\000\
\\030\000\212\000\031\000\212\000\032\000\212\000\034\000\212\000\
\\035\000\212\000\036\000\212\000\037\000\212\000\038\000\212\000\
\\039\000\212\000\040\000\212\000\041\000\212\000\044\000\212\000\
\\047\000\212\000\048\000\212\000\000\000\
\\001\000\006\000\213\000\010\000\213\000\024\000\213\000\025\000\213\000\
\\026\000\213\000\027\000\213\000\028\000\213\000\029\000\213\000\
\\030\000\213\000\031\000\213\000\032\000\213\000\034\000\213\000\
\\035\000\213\000\036\000\213\000\037\000\213\000\038\000\213\000\
\\039\000\213\000\040\000\213\000\041\000\213\000\044\000\213\000\
\\047\000\213\000\048\000\213\000\000\000\
\\001\000\006\000\214\000\010\000\214\000\024\000\214\000\025\000\214\000\
\\026\000\214\000\027\000\214\000\028\000\214\000\029\000\214\000\
\\030\000\214\000\031\000\214\000\032\000\214\000\034\000\214\000\
\\035\000\214\000\036\000\214\000\037\000\214\000\038\000\214\000\
\\039\000\214\000\040\000\214\000\041\000\214\000\044\000\214\000\
\\047\000\214\000\048\000\214\000\000\000\
\\001\000\006\000\215\000\010\000\215\000\024\000\215\000\025\000\215\000\
\\026\000\215\000\027\000\215\000\028\000\215\000\029\000\215\000\
\\030\000\215\000\031\000\215\000\032\000\215\000\034\000\215\000\
\\035\000\215\000\036\000\215\000\037\000\215\000\038\000\215\000\
\\039\000\215\000\040\000\215\000\041\000\215\000\044\000\215\000\
\\047\000\215\000\048\000\215\000\000\000\
\\001\000\006\000\216\000\010\000\216\000\024\000\216\000\025\000\216\000\
\\026\000\216\000\027\000\216\000\028\000\216\000\029\000\216\000\
\\030\000\216\000\031\000\216\000\032\000\216\000\034\000\216\000\
\\035\000\216\000\036\000\216\000\037\000\216\000\038\000\216\000\
\\039\000\216\000\040\000\216\000\041\000\216\000\044\000\216\000\
\\047\000\216\000\048\000\216\000\000\000\
\\001\000\006\000\217\000\010\000\217\000\024\000\217\000\025\000\217\000\
\\026\000\217\000\027\000\217\000\028\000\217\000\029\000\217\000\
\\030\000\217\000\031\000\217\000\032\000\217\000\034\000\217\000\
\\035\000\217\000\036\000\217\000\037\000\217\000\038\000\217\000\
\\039\000\217\000\040\000\217\000\041\000\217\000\044\000\217\000\
\\047\000\217\000\048\000\217\000\000\000\
\\001\000\006\000\218\000\010\000\218\000\024\000\218\000\025\000\218\000\
\\026\000\218\000\027\000\218\000\028\000\218\000\029\000\218\000\
\\030\000\218\000\031\000\218\000\032\000\218\000\034\000\218\000\
\\035\000\218\000\036\000\218\000\037\000\218\000\038\000\218\000\
\\039\000\218\000\040\000\218\000\041\000\218\000\044\000\218\000\
\\047\000\218\000\048\000\218\000\000\000\
\\001\000\006\000\219\000\010\000\219\000\024\000\219\000\025\000\219\000\
\\026\000\219\000\027\000\219\000\028\000\219\000\029\000\219\000\
\\030\000\219\000\031\000\219\000\032\000\219\000\034\000\219\000\
\\035\000\219\000\036\000\219\000\037\000\219\000\038\000\219\000\
\\039\000\219\000\040\000\219\000\041\000\219\000\044\000\219\000\
\\047\000\219\000\048\000\219\000\000\000\
\\001\000\006\000\220\000\010\000\220\000\024\000\220\000\025\000\220\000\
\\026\000\220\000\027\000\220\000\028\000\220\000\029\000\220\000\
\\030\000\220\000\031\000\220\000\032\000\220\000\034\000\220\000\
\\035\000\220\000\036\000\220\000\037\000\220\000\038\000\220\000\
\\039\000\220\000\040\000\220\000\041\000\220\000\044\000\220\000\
\\047\000\220\000\048\000\220\000\000\000\
\\001\000\006\000\221\000\010\000\221\000\024\000\221\000\025\000\221\000\
\\026\000\221\000\027\000\221\000\028\000\221\000\029\000\221\000\
\\030\000\221\000\031\000\221\000\032\000\221\000\034\000\221\000\
\\035\000\221\000\036\000\221\000\037\000\221\000\038\000\221\000\
\\039\000\221\000\040\000\221\000\041\000\221\000\044\000\221\000\
\\047\000\221\000\048\000\221\000\000\000\
\\001\000\006\000\222\000\010\000\222\000\024\000\222\000\025\000\222\000\
\\026\000\222\000\027\000\222\000\028\000\222\000\029\000\222\000\
\\030\000\222\000\031\000\222\000\032\000\222\000\034\000\222\000\
\\035\000\222\000\036\000\222\000\037\000\222\000\038\000\222\000\
\\039\000\222\000\040\000\222\000\041\000\222\000\044\000\222\000\
\\047\000\222\000\048\000\222\000\000\000\
\\001\000\006\000\223\000\010\000\223\000\024\000\223\000\025\000\223\000\
\\026\000\223\000\027\000\223\000\028\000\223\000\029\000\223\000\
\\030\000\223\000\031\000\223\000\032\000\223\000\034\000\223\000\
\\035\000\223\000\036\000\223\000\037\000\223\000\038\000\223\000\
\\039\000\223\000\040\000\223\000\041\000\223\000\044\000\223\000\
\\047\000\223\000\048\000\223\000\000\000\
\\001\000\006\000\224\000\010\000\224\000\024\000\224\000\025\000\224\000\
\\026\000\224\000\027\000\224\000\028\000\224\000\029\000\224\000\
\\030\000\224\000\031\000\224\000\032\000\224\000\034\000\224\000\
\\035\000\224\000\036\000\224\000\037\000\224\000\038\000\224\000\
\\039\000\224\000\040\000\224\000\041\000\224\000\044\000\224\000\
\\047\000\224\000\048\000\224\000\000\000\
\\001\000\006\000\108\000\000\000\
\\001\000\007\000\170\000\008\000\170\000\011\000\170\000\047\000\170\000\
\\051\000\170\000\000\000\
\\001\000\007\000\144\000\000\000\
\\001\000\008\000\151\000\000\000\
\\001\000\010\000\099\000\000\000\
\\001\000\011\000\140\000\000\000\
\\001\000\012\000\155\000\045\000\155\000\000\000\
\\001\000\012\000\156\000\045\000\156\000\000\000\
\\001\000\012\000\157\000\045\000\157\000\000\000\
\\001\000\012\000\158\000\045\000\158\000\054\000\015\000\000\000\
\\001\000\012\000\159\000\045\000\159\000\054\000\159\000\000\000\
\\001\000\012\000\160\000\045\000\160\000\053\000\013\000\054\000\160\000\000\000\
\\001\000\012\000\161\000\045\000\161\000\053\000\161\000\054\000\161\000\000\000\
\\001\000\012\000\162\000\045\000\162\000\052\000\009\000\053\000\162\000\
\\054\000\162\000\000\000\
\\001\000\012\000\019\000\045\000\018\000\000\000\
\\001\000\042\000\050\000\000\000\
\\001\000\043\000\052\000\000\000\
\\001\000\043\000\053\000\000\000\
\\001\000\043\000\104\000\000\000\
\\001\000\043\000\105\000\000\000\
\\001\000\043\000\106\000\000\000\
\\001\000\043\000\111\000\000\000\
\\001\000\043\000\112\000\000\000\
\\001\000\043\000\113\000\000\000\
\\001\000\044\000\185\000\000\000\
\\001\000\044\000\186\000\000\000\
\\001\000\044\000\187\000\000\000\
\\001\000\044\000\188\000\000\000\
\\001\000\044\000\109\000\000\000\
\\001\000\044\000\110\000\000\000\
\\001\000\044\000\132\000\000\000\
\\001\000\044\000\141\000\000\000\
\\001\000\044\000\142\000\000\000\
\\001\000\044\000\145\000\000\000\
\\001\000\044\000\146\000\000\000\
\\001\000\044\000\147\000\000\000\
\\001\000\044\000\150\000\000\000\
\\001\000\045\000\018\000\000\000\
\\001\000\047\000\154\000\051\000\154\000\000\000\
\\001\000\047\000\163\000\048\000\163\000\000\000\
\\001\000\047\000\164\000\048\000\164\000\000\000\
\\001\000\047\000\165\000\048\000\165\000\000\000\
\\001\000\047\000\166\000\048\000\166\000\000\000\
\\001\000\047\000\167\000\048\000\167\000\000\000\
\\001\000\047\000\168\000\048\000\168\000\000\000\
\\001\000\047\000\169\000\000\000\
\\001\000\047\000\173\000\000\000\
\\001\000\047\000\174\000\000\000\
\\001\000\047\000\175\000\000\000\
\\001\000\047\000\176\000\000\000\
\\001\000\047\000\177\000\000\000\
\\001\000\047\000\178\000\000\000\
\\001\000\047\000\179\000\000\000\
\\001\000\047\000\180\000\000\000\
\\001\000\047\000\181\000\000\000\
\\001\000\047\000\182\000\000\000\
\\001\000\047\000\183\000\000\000\
\\001\000\047\000\184\000\000\000\
\\001\000\047\000\011\000\048\000\010\000\000\000\
\\001\000\047\000\024\000\048\000\023\000\000\000\
\\001\000\047\000\027\000\048\000\026\000\000\000\
\\001\000\047\000\029\000\000\000\
\\001\000\047\000\049\000\000\000\
\\001\000\048\000\143\000\000\000\
\\001\000\049\000\021\000\000\000\
\\001\000\049\000\022\000\000\000\
\\001\000\049\000\025\000\000\000\
\\001\000\049\000\028\000\000\000\
\\001\000\049\000\031\000\000\000\
\\001\000\049\000\032\000\000\000\
\\001\000\049\000\033\000\000\000\
\\001\000\049\000\051\000\000\000\
\\001\000\049\000\076\000\000\000\
\\001\000\051\000\000\000\000\000\
\\001\000\051\000\153\000\000\000\
\\001\000\051\000\020\000\000\000\
\"
val actionRowNumbers =
"\055\000\100\000\053\000\051\000\
\\049\000\056\000\117\000\106\000\
\\107\000\054\000\101\000\108\000\
\\102\000\109\000\103\000\080\000\
\\003\000\110\000\116\000\086\000\
\\085\000\111\000\052\000\084\000\
\\112\000\050\000\082\000\048\000\
\\005\000\055\000\083\000\081\000\
\\093\000\092\000\091\000\090\000\
\\089\000\088\000\104\000\057\000\
\\043\000\113\000\058\000\059\000\
\\001\000\001\000\087\000\004\000\
\\001\000\095\000\114\000\000\000\
\\033\000\029\000\023\000\018\000\
\\016\000\013\000\006\000\046\000\
\\041\000\001\000\001\000\002\000\
\\002\000\060\000\061\000\062\000\
\\002\000\036\000\035\000\034\000\
\\042\000\094\000\070\000\066\000\
\\071\000\063\000\064\000\065\000\
\\002\000\002\000\002\000\002\000\
\\002\000\002\000\002\000\002\000\
\\002\000\001\000\001\000\001\000\
\\001\000\001\000\001\000\001\000\
\\001\000\079\000\072\000\017\000\
\\030\000\031\000\001\000\001\000\
\\001\000\032\000\079\000\096\000\
\\099\000\001\000\001\000\001\000\
\\028\000\026\000\024\000\027\000\
\\025\000\022\000\020\000\021\000\
\\019\000\015\000\014\000\012\000\
\\010\000\011\000\009\000\008\000\
\\007\000\047\000\037\000\073\000\
\\074\000\105\000\044\000\075\000\
\\076\000\077\000\098\000\040\000\
\\039\000\001\000\079\000\069\000\
\\068\000\067\000\078\000\045\000\
\\038\000\097\000\115\000"
val gotoT =
"\
\\001\000\150\000\002\000\006\000\003\000\005\000\006\000\004\000\
\\008\000\003\000\009\000\002\000\011\000\001\000\000\000\
\\000\000\
\\010\000\010\000\000\000\
\\007\000\012\000\000\000\
\\000\000\
\\004\000\015\000\005\000\014\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\012\000\028\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\013\000\038\000\014\000\037\000\015\000\036\000\016\000\035\000\
\\017\000\034\000\018\000\033\000\019\000\032\000\000\000\
\\002\000\046\000\003\000\005\000\006\000\004\000\008\000\003\000\
\\009\000\002\000\011\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\021\000\059\000\022\000\058\000\023\000\057\000\024\000\056\000\
\\025\000\055\000\026\000\054\000\027\000\053\000\028\000\052\000\000\000\
\\021\000\072\000\022\000\058\000\023\000\057\000\024\000\056\000\
\\025\000\055\000\026\000\054\000\027\000\053\000\028\000\052\000\000\000\
\\000\000\
\\000\000\
\\021\000\073\000\022\000\058\000\023\000\057\000\024\000\056\000\
\\025\000\055\000\026\000\054\000\027\000\053\000\028\000\052\000\000\000\
\\000\000\
\\000\000\
\\020\000\076\000\021\000\075\000\022\000\058\000\023\000\057\000\
\\024\000\056\000\025\000\055\000\026\000\054\000\027\000\053\000\
\\028\000\052\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\021\000\098\000\022\000\058\000\023\000\057\000\024\000\056\000\
\\025\000\055\000\026\000\054\000\027\000\053\000\028\000\052\000\000\000\
\\024\000\099\000\025\000\055\000\026\000\054\000\027\000\053\000\
\\028\000\052\000\000\000\
\\027\000\100\000\028\000\052\000\000\000\
\\027\000\101\000\028\000\052\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\027\000\105\000\028\000\052\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\027\000\112\000\028\000\052\000\000\000\
\\027\000\113\000\028\000\052\000\000\000\
\\027\000\114\000\028\000\052\000\000\000\
\\027\000\115\000\028\000\052\000\000\000\
\\027\000\116\000\028\000\052\000\000\000\
\\026\000\117\000\027\000\053\000\028\000\052\000\000\000\
\\026\000\118\000\027\000\053\000\028\000\052\000\000\000\
\\026\000\119\000\027\000\053\000\028\000\052\000\000\000\
\\026\000\120\000\027\000\053\000\028\000\052\000\000\000\
\\024\000\121\000\025\000\055\000\026\000\054\000\027\000\053\000\
\\028\000\052\000\000\000\
\\024\000\122\000\025\000\055\000\026\000\054\000\027\000\053\000\
\\028\000\052\000\000\000\
\\022\000\123\000\023\000\057\000\024\000\056\000\025\000\055\000\
\\026\000\054\000\027\000\053\000\028\000\052\000\000\000\
\\022\000\124\000\023\000\057\000\024\000\056\000\025\000\055\000\
\\026\000\054\000\027\000\053\000\028\000\052\000\000\000\
\\022\000\125\000\023\000\057\000\024\000\056\000\025\000\055\000\
\\026\000\054\000\027\000\053\000\028\000\052\000\000\000\
\\022\000\126\000\023\000\057\000\024\000\056\000\025\000\055\000\
\\026\000\054\000\027\000\053\000\028\000\052\000\000\000\
\\022\000\127\000\023\000\057\000\024\000\056\000\025\000\055\000\
\\026\000\054\000\027\000\053\000\028\000\052\000\000\000\
\\022\000\128\000\023\000\057\000\024\000\056\000\025\000\055\000\
\\026\000\054\000\027\000\053\000\028\000\052\000\000\000\
\\004\000\129\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\021\000\131\000\022\000\058\000\023\000\057\000\024\000\056\000\
\\025\000\055\000\026\000\054\000\027\000\053\000\028\000\052\000\000\000\
\\021\000\132\000\022\000\058\000\023\000\057\000\024\000\056\000\
\\025\000\055\000\026\000\054\000\027\000\053\000\028\000\052\000\000\000\
\\021\000\133\000\022\000\058\000\023\000\057\000\024\000\056\000\
\\025\000\055\000\026\000\054\000\027\000\053\000\028\000\052\000\000\000\
\\000\000\
\\004\000\134\000\000\000\
\\000\000\
\\000\000\
\\021\000\135\000\022\000\058\000\023\000\057\000\024\000\056\000\
\\025\000\055\000\026\000\054\000\027\000\053\000\028\000\052\000\000\000\
\\021\000\136\000\022\000\058\000\023\000\057\000\024\000\056\000\
\\025\000\055\000\026\000\054\000\027\000\053\000\028\000\052\000\000\000\
\\021\000\137\000\022\000\058\000\023\000\057\000\024\000\056\000\
\\025\000\055\000\026\000\054\000\027\000\053\000\028\000\052\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\021\000\146\000\022\000\058\000\023\000\057\000\024\000\056\000\
\\025\000\055\000\026\000\054\000\027\000\053\000\028\000\052\000\000\000\
\\004\000\147\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\"
val numstates = 151
val numrules = 72
val s = ref "" and index = ref 0
val string_to_int = fn () => 
let val i = !index
in index := i+2; Char.ord(String.sub(!s,i)) + Char.ord(String.sub(!s,i+1)) * 256
end
val string_to_list = fn s' =>
    let val len = String.size s'
        fun f () =
           if !index < len then string_to_int() :: f()
           else nil
   in index := 0; s := s'; f ()
   end
val string_to_pairlist = fn (conv_key,conv_entry) =>
     let fun f () =
         case string_to_int()
         of 0 => EMPTY
          | n => PAIR(conv_key (n-1),conv_entry (string_to_int()),f())
     in f
     end
val string_to_pairlist_default = fn (conv_key,conv_entry) =>
    let val conv_row = string_to_pairlist(conv_key,conv_entry)
    in fn () =>
       let val default = conv_entry(string_to_int())
           val row = conv_row()
       in (row,default)
       end
   end
val string_to_table = fn (convert_row,s') =>
    let val len = String.size s'
        fun f ()=
           if !index < len then convert_row() :: f()
           else nil
     in (s := s'; index := 0; f ())
     end
local
  val memo = Array.array(numstates+numrules,ERROR)
  val _ =let fun g i=(Array.update(memo,i,REDUCE(i-numstates)); g(i+1))
       fun f i =
            if i=numstates then g i
            else (Array.update(memo,i,SHIFT (STATE i)); f (i+1))
          in f 0 handle General.Subscript => ()
          end
in
val entry_to_action = fn 0 => ACCEPT | 1 => ERROR | j => Array.sub(memo,(j-2))
end
val gotoT=Array.fromList(string_to_table(string_to_pairlist(NT,STATE),gotoT))
val actionRows=string_to_table(string_to_pairlist_default(T,entry_to_action),actionRows)
val actionRowNumbers = string_to_list actionRowNumbers
val actionT = let val actionRowLookUp=
let val a=Array.fromList(actionRows) in fn i=>Array.sub(a,i) end
in Array.fromList(List.map actionRowLookUp actionRowNumbers)
end
in LrTable.mkLrTable {actions=actionT,gotos=gotoT,numRules=numrules,
numStates=numstates,initialState=STATE 0}
end
end
local open Header in
type pos = int
type arg = string
structure MlyValue = 
struct
datatype svalue = VOID | ntVOID of unit ->  unit
 | IDENTIFIER of unit ->  (string) | BOOLEAN of unit ->  (bool)
 | INTEG of unit ->  (BigInt.bigint)
 | RATION of unit ->  (Rational.rational)
 | sixthexpression of unit ->  (Expression)
 | fifthexpression of unit ->  (Expression)
 | fourthexpression of unit ->  (Expression)
 | thirdexpression of unit ->  (Expression)
 | secondexpression of unit ->  (Expression)
 | firstexpression of unit ->  (Expression)
 | zeroexpression of unit ->  (Expression)
 | expression of unit ->  (Expression)
 | printexpression of unit ->  (PrintExp)
 | whilecmd of unit ->  (Command)
 | conditionalcmd of unit ->  (Command)
 | printcmd of unit ->  (Command) | readcmd of unit ->  (Command)
 | callcmd of unit ->  (Command) | assignmentcmd of unit ->  (Command)
 | command of unit ->  (Command)
 | multiple_command of unit ->  (CommandSeq)
 | ratvardecls of unit ->  (RatVarDecl_Mul)
 | intvardecls of unit ->  (IntVarDecl_Mul)
 | vardecls_rat of unit ->  (RatVarDecl_Mul)
 | vardecls_intrat of unit ->  (VarDecls)
 | boolvardecls of unit ->  (BoolVarDecl_Mul)
 | vardecls of unit ->  (VarDecls) | procdef of unit ->  (Procedure)
 | commandseq of unit ->  (CommandSeq)
 | declarationseq of unit ->  (DeclSeq) | block of unit ->  (Block)
 | program of unit ->  (Rational_PL0)
end
type svalue = MlyValue.svalue
type result = Rational_PL0
end
structure EC=
struct
open LrTable
infix 5 $$
fun x $$ y = y::x
val is_keyword =
fn (T 3) => true | (T 4) => true | (T 5) => true | (T 6) => true | (T 
7) => true | (T 8) => true | (T 9) => true | (T 10) => true | (T 11)
 => true | (T 12) => true | (T 13) => true | (T 14) => true | (T 15)
 => true | (T 16) => true | (T 17) => true | (T 18) => true | (T 19)
 => true | (T 20) => true | (T 21) => true | (T 51) => true | (T 52)
 => true | (T 53) => true | _ => false
val preferred_change : (term list * term list) list = 
nil
val noShift = 
fn (T 50) => true | (T 46) => true | _ => false
val showTerminal =
fn (T 0) => "RATION"
  | (T 1) => "INTEG"
  | (T 2) => "BOOLEAN"
  | (T 3) => "VAR"
  | (T 4) => "IF"
  | (T 5) => "THEN"
  | (T 6) => "ELSE"
  | (T 7) => "FI"
  | (T 8) => "WHILE"
  | (T 9) => "DO"
  | (T 10) => "OD"
  | (T 11) => "PROCEDURE"
  | (T 12) => "PRINT"
  | (T 13) => "READ"
  | (T 14) => "CALL"
  | (T 15) => "INVERSE"
  | (T 16) => "MAKE_RAT"
  | (T 17) => "RAT"
  | (T 18) => "SHOWRAT"
  | (T 19) => "SHOWDECIMAL"
  | (T 20) => "FROMDECIMAL"
  | (T 21) => "TODECIMAL"
  | (T 22) => "MINUS_SIGN"
  | (T 23) => "PLUS_SIGN"
  | (T 24) => "SUBTRACT_INT"
  | (T 25) => "ADD_RAT"
  | (T 26) => "SUBTRACT_RAT"
  | (T 27) => "MULTIPLY_RAT"
  | (T 28) => "DIVIDE_RAT"
  | (T 29) => "MULTIPLY_INT"
  | (T 30) => "DIVIDE_INT"
  | (T 31) => "MOD_INT"
  | (T 32) => "NEGATE_BOOL"
  | (T 33) => "AND_BOOL"
  | (T 34) => "OR_BOOL"
  | (T 35) => "EQUAL"
  | (T 36) => "NOT_EQUAL"
  | (T 37) => "LESS"
  | (T 38) => "LESS_EQUAL"
  | (T 39) => "GREATER"
  | (T 40) => "GREATER_EQUAL"
  | (T 41) => "ASSIGNMENT"
  | (T 42) => "LPAREN"
  | (T 43) => "RPAREN"
  | (T 44) => "LCURLYBRACE"
  | (T 45) => "RCURLYBRACE"
  | (T 46) => "EOS"
  | (T 47) => "COMMA"
  | (T 48) => "IDENTIFIER"
  | (T 49) => "COMMENT"
  | (T 50) => "EOF"
  | (T 51) => "RATIONAL_RES"
  | (T 52) => "INTEGER_RES"
  | (T 53) => "BOOLEAN_RES"
  | (T 54) => "BAD_CHARACTER"
  | _ => "bogus-term"
local open Header in
val errtermvalue=
fn _ => MlyValue.VOID
end
val terms : term list = nil
 $$ (T 54) $$ (T 53) $$ (T 52) $$ (T 51) $$ (T 50) $$ (T 49) $$ (T 47)
 $$ (T 46) $$ (T 45) $$ (T 44) $$ (T 43) $$ (T 42) $$ (T 41) $$ (T 40)
 $$ (T 39) $$ (T 38) $$ (T 37) $$ (T 36) $$ (T 35) $$ (T 34) $$ (T 33)
 $$ (T 32) $$ (T 31) $$ (T 30) $$ (T 29) $$ (T 28) $$ (T 27) $$ (T 26)
 $$ (T 25) $$ (T 24) $$ (T 23) $$ (T 22) $$ (T 21) $$ (T 20) $$ (T 19)
 $$ (T 18) $$ (T 17) $$ (T 16) $$ (T 15) $$ (T 14) $$ (T 13) $$ (T 12)
 $$ (T 11) $$ (T 10) $$ (T 9) $$ (T 8) $$ (T 7) $$ (T 6) $$ (T 5) $$ 
(T 4) $$ (T 3)end
structure Actions =
struct 
exception mlyAction of int
local open Header in
val actions = 
fn (i392,defaultPos,stack,
    (filename):arg) =>
case (i392,stack)
of  ( 0, ( ( _, ( _, _, EOF1right)) :: ( _, ( MlyValue.block block1, 
block1left, _)) :: rest671)) => let val  result = MlyValue.program (fn
 _ => let val  (block as block1) = block1 ()
 in ((Program (block)))
end)
 in ( LrTable.NT 0, ( result, block1left, EOF1right), rest671)
end
|  ( 1, ( ( _, ( MlyValue.commandseq commandseq1, _, commandseq1right)
) :: ( _, ( MlyValue.declarationseq declarationseq1, 
declarationseq1left, _)) :: rest671)) => let val  result = 
MlyValue.block (fn _ => let val  (declarationseq as declarationseq1) =
 declarationseq1 ()
 val  (commandseq as commandseq1) = commandseq1 ()
 in ((Block (declarationseq, commandseq)))
end)
 in ( LrTable.NT 1, ( result, declarationseq1left, commandseq1right), 
rest671)
end
|  ( 2, ( ( _, ( _, _, EOS1right)) :: ( _, ( MlyValue.procdef procdef1
, _, _)) :: ( _, ( MlyValue.declarationseq declarationseq1, 
declarationseq1left, _)) :: rest671)) => let val  result = 
MlyValue.declarationseq (fn _ => let val  (declarationseq as 
declarationseq1) = declarationseq1 ()
 val  (procdef as procdef1) = procdef1 ()
 in ((DeclSeq (declarationseq, procdef)))
end)
 in ( LrTable.NT 2, ( result, declarationseq1left, EOS1right), rest671
)
end
|  ( 3, ( ( _, ( MlyValue.vardecls vardecls1, vardecls1left, 
vardecls1right)) :: rest671)) => let val  result = 
MlyValue.declarationseq (fn _ => let val  (vardecls as vardecls1) = 
vardecls1 ()
 in ((DeclSeqVar (vardecls)))
end)
 in ( LrTable.NT 2, ( result, vardecls1left, vardecls1right), rest671)

end
|  ( 4, ( ( _, ( _, _, EOS1right)) :: ( _, ( MlyValue.boolvardecls 
boolvardecls1, _, _)) :: ( _, ( MlyValue.vardecls_intrat 
vardecls_intrat1, vardecls_intrat1left, _)) :: rest671)) => let val  
result = MlyValue.vardecls (fn _ => let val  (vardecls_intrat as 
vardecls_intrat1) = vardecls_intrat1 ()
 val  (boolvardecls as boolvardecls1) = boolvardecls1 ()
 in ((Declaration_Bool (vardecls_intrat, boolvardecls)))
end)
 in ( LrTable.NT 5, ( result, vardecls_intrat1left, EOS1right), 
rest671)
end
|  ( 5, ( ( _, ( MlyValue.vardecls_intrat vardecls_intrat1, 
vardecls_intrat1left, vardecls_intrat1right)) :: rest671)) => let val 
 result = MlyValue.vardecls (fn _ => let val  (vardecls_intrat as 
vardecls_intrat1) = vardecls_intrat1 ()
 in ((vardecls_intrat))
end)
 in ( LrTable.NT 5, ( result, vardecls_intrat1left, 
vardecls_intrat1right), rest671)
end
|  ( 6, ( ( _, ( _, _, EOS1right)) :: ( _, ( MlyValue.intvardecls 
intvardecls1, _, _)) :: ( _, ( MlyValue.vardecls_rat vardecls_rat1, 
vardecls_rat1left, _)) :: rest671)) => let val  result = 
MlyValue.vardecls_intrat (fn _ => let val  (vardecls_rat as 
vardecls_rat1) = vardecls_rat1 ()
 val  (intvardecls as intvardecls1) = intvardecls1 ()
 in ((Declaration_intrat (vardecls_rat, intvardecls)))
end)
 in ( LrTable.NT 7, ( result, vardecls_rat1left, EOS1right), rest671)

end
|  ( 7, ( ( _, ( MlyValue.vardecls_rat vardecls_rat1, 
vardecls_rat1left, vardecls_rat1right)) :: rest671)) => let val  
result = MlyValue.vardecls_intrat (fn _ => let val  (vardecls_rat as 
vardecls_rat1) = vardecls_rat1 ()
 in ((RatDecl(vardecls_rat)))
end)
 in ( LrTable.NT 7, ( result, vardecls_rat1left, vardecls_rat1right), 
rest671)
end
|  ( 8, ( ( _, ( _, _, EOS1right)) :: ( _, ( MlyValue.ratvardecls 
ratvardecls1, ratvardecls1left, _)) :: rest671)) => let val  result = 
MlyValue.vardecls_rat (fn _ => let val  (ratvardecls as ratvardecls1)
 = ratvardecls1 ()
 in ((ratvardecls))
end)
 in ( LrTable.NT 8, ( result, ratvardecls1left, EOS1right), rest671)

end
|  ( 9, ( rest671)) => let val  result = MlyValue.vardecls_rat (fn _
 => ((Phi)))
 in ( LrTable.NT 8, ( result, defaultPos, defaultPos), rest671)
end
|  ( 10, ( ( _, ( MlyValue.IDENTIFIER IDENTIFIER1, _, IDENTIFIER1right
)) :: _ :: ( _, ( MlyValue.boolvardecls boolvardecls1, 
boolvardecls1left, _)) :: rest671)) => let val  result = 
MlyValue.boolvardecls (fn _ => let val  (boolvardecls as boolvardecls1
) = boolvardecls1 ()
 val  (IDENTIFIER as IDENTIFIER1) = IDENTIFIER1 ()
 in (
(BoolVarDecl_Mul (boolvardecls, BoolVarDecl (Identifier (IDENTIFIER))))
)
end)
 in ( LrTable.NT 6, ( result, boolvardecls1left, IDENTIFIER1right), 
rest671)
end
|  ( 11, ( ( _, ( MlyValue.IDENTIFIER IDENTIFIER1, _, IDENTIFIER1right
)) :: ( _, ( _, BOOLEAN_RES1left, _)) :: rest671)) => let val  result
 = MlyValue.boolvardecls (fn _ => let val  (IDENTIFIER as IDENTIFIER1)
 = IDENTIFIER1 ()
 in ((BoolVarDecls (BoolVarDecl (Identifier (IDENTIFIER)))))
end)
 in ( LrTable.NT 6, ( result, BOOLEAN_RES1left, IDENTIFIER1right), 
rest671)
end
|  ( 12, ( ( _, ( MlyValue.IDENTIFIER IDENTIFIER1, _, IDENTIFIER1right
)) :: _ :: ( _, ( MlyValue.intvardecls intvardecls1, intvardecls1left,
 _)) :: rest671)) => let val  result = MlyValue.intvardecls (fn _ =>
 let val  (intvardecls as intvardecls1) = intvardecls1 ()
 val  (IDENTIFIER as IDENTIFIER1) = IDENTIFIER1 ()
 in (
(IntVarDecl_Mul (intvardecls, IntVarDecl (Identifier (IDENTIFIER)))))

end)
 in ( LrTable.NT 9, ( result, intvardecls1left, IDENTIFIER1right), 
rest671)
end
|  ( 13, ( ( _, ( MlyValue.IDENTIFIER IDENTIFIER1, _, IDENTIFIER1right
)) :: ( _, ( _, INTEGER_RES1left, _)) :: rest671)) => let val  result
 = MlyValue.intvardecls (fn _ => let val  (IDENTIFIER as IDENTIFIER1)
 = IDENTIFIER1 ()
 in ((IntVarDecls (IntVarDecl (Identifier (IDENTIFIER)))))
end)
 in ( LrTable.NT 9, ( result, INTEGER_RES1left, IDENTIFIER1right), 
rest671)
end
|  ( 14, ( ( _, ( MlyValue.IDENTIFIER IDENTIFIER1, _, IDENTIFIER1right
)) :: _ :: ( _, ( MlyValue.ratvardecls ratvardecls1, ratvardecls1left,
 _)) :: rest671)) => let val  result = MlyValue.ratvardecls (fn _ =>
 let val  (ratvardecls as ratvardecls1) = ratvardecls1 ()
 val  (IDENTIFIER as IDENTIFIER1) = IDENTIFIER1 ()
 in (
(RatVarDecl_Mul (ratvardecls, RatVarDecl (Identifier (IDENTIFIER)))))

end)
 in ( LrTable.NT 10, ( result, ratvardecls1left, IDENTIFIER1right), 
rest671)
end
|  ( 15, ( ( _, ( MlyValue.IDENTIFIER IDENTIFIER1, _, IDENTIFIER1right
)) :: ( _, ( _, RATIONAL_RES1left, _)) :: rest671)) => let val  result
 = MlyValue.ratvardecls (fn _ => let val  (IDENTIFIER as IDENTIFIER1)
 = IDENTIFIER1 ()
 in ((RatVarDecls ( RatVarDecl (Identifier (IDENTIFIER)))))
end)
 in ( LrTable.NT 10, ( result, RATIONAL_RES1left, IDENTIFIER1right), 
rest671)
end
|  ( 16, ( ( _, ( MlyValue.block block1, _, block1right)) :: ( _, ( 
MlyValue.IDENTIFIER IDENTIFIER1, _, _)) :: ( _, ( _, PROCEDURE1left, _
)) :: rest671)) => let val  result = MlyValue.procdef (fn _ => let
 val  (IDENTIFIER as IDENTIFIER1) = IDENTIFIER1 ()
 val  (block as block1) = block1 ()
 in ((Procedure (Identifier (IDENTIFIER), block)))
end)
 in ( LrTable.NT 4, ( result, PROCEDURE1left, block1right), rest671)

end
|  ( 17, ( ( _, ( _, _, RCURLYBRACE1right)) :: ( _, ( 
MlyValue.multiple_command multiple_command1, _, _)) :: ( _, ( _, 
LCURLYBRACE1left, _)) :: rest671)) => let val  result = 
MlyValue.commandseq (fn _ => let val  (multiple_command as 
multiple_command1) = multiple_command1 ()
 in ((multiple_command))
end)
 in ( LrTable.NT 3, ( result, LCURLYBRACE1left, RCURLYBRACE1right), 
rest671)
end
|  ( 18, ( rest671)) => let val  result = MlyValue.multiple_command
 (fn _ => ((Empty)))
 in ( LrTable.NT 11, ( result, defaultPos, defaultPos), rest671)
end
|  ( 19, ( ( _, ( _, _, EOS1right)) :: ( _, ( MlyValue.command 
command1, _, _)) :: ( _, ( MlyValue.multiple_command multiple_command1
, multiple_command1left, _)) :: rest671)) => let val  result = 
MlyValue.multiple_command (fn _ => let val  (multiple_command as 
multiple_command1) = multiple_command1 ()
 val  (command as command1) = command1 ()
 in ((CommandSeq (multiple_command, command)))
end)
 in ( LrTable.NT 11, ( result, multiple_command1left, EOS1right), 
rest671)
end
|  ( 20, ( ( _, ( MlyValue.assignmentcmd assignmentcmd1, 
assignmentcmd1left, assignmentcmd1right)) :: rest671)) => let val  
result = MlyValue.command (fn _ => let val  (assignmentcmd as 
assignmentcmd1) = assignmentcmd1 ()
 in ((assignmentcmd))
end)
 in ( LrTable.NT 12, ( result, assignmentcmd1left, assignmentcmd1right
), rest671)
end
|  ( 21, ( ( _, ( MlyValue.callcmd callcmd1, callcmd1left, 
callcmd1right)) :: rest671)) => let val  result = MlyValue.command (fn
 _ => let val  (callcmd as callcmd1) = callcmd1 ()
 in ((callcmd))
end)
 in ( LrTable.NT 12, ( result, callcmd1left, callcmd1right), rest671)

end
|  ( 22, ( ( _, ( MlyValue.readcmd readcmd1, readcmd1left, 
readcmd1right)) :: rest671)) => let val  result = MlyValue.command (fn
 _ => let val  (readcmd as readcmd1) = readcmd1 ()
 in ((readcmd))
end)
 in ( LrTable.NT 12, ( result, readcmd1left, readcmd1right), rest671)

end
|  ( 23, ( ( _, ( MlyValue.printcmd printcmd1, printcmd1left, 
printcmd1right)) :: rest671)) => let val  result = MlyValue.command
 (fn _ => let val  (printcmd as printcmd1) = printcmd1 ()
 in ((printcmd))
end)
 in ( LrTable.NT 12, ( result, printcmd1left, printcmd1right), rest671
)
end
|  ( 24, ( ( _, ( MlyValue.conditionalcmd conditionalcmd1, 
conditionalcmd1left, conditionalcmd1right)) :: rest671)) => let val  
result = MlyValue.command (fn _ => let val  (conditionalcmd as 
conditionalcmd1) = conditionalcmd1 ()
 in ((conditionalcmd))
end)
 in ( LrTable.NT 12, ( result, conditionalcmd1left, 
conditionalcmd1right), rest671)
end
|  ( 25, ( ( _, ( MlyValue.whilecmd whilecmd1, whilecmd1left, 
whilecmd1right)) :: rest671)) => let val  result = MlyValue.command
 (fn _ => let val  (whilecmd as whilecmd1) = whilecmd1 ()
 in ((whilecmd))
end)
 in ( LrTable.NT 12, ( result, whilecmd1left, whilecmd1right), rest671
)
end
|  ( 26, ( ( _, ( MlyValue.expression expression1, _, expression1right
)) :: _ :: ( _, ( MlyValue.IDENTIFIER IDENTIFIER1, IDENTIFIER1left, _)
) :: rest671)) => let val  result = MlyValue.assignmentcmd (fn _ =>
 let val  (IDENTIFIER as IDENTIFIER1) = IDENTIFIER1 ()
 val  (expression as expression1) = expression1 ()
 in ((Assignment_Cmd (Identifier (IDENTIFIER), expression)))
end)
 in ( LrTable.NT 13, ( result, IDENTIFIER1left, expression1right), 
rest671)
end
|  ( 27, ( ( _, ( MlyValue.IDENTIFIER IDENTIFIER1, _, IDENTIFIER1right
)) :: ( _, ( _, CALL1left, _)) :: rest671)) => let val  result = 
MlyValue.callcmd (fn _ => let val  (IDENTIFIER as IDENTIFIER1) = 
IDENTIFIER1 ()
 in ((Call_Cmd (Identifier (IDENTIFIER))))
end)
 in ( LrTable.NT 14, ( result, CALL1left, IDENTIFIER1right), rest671)

end
|  ( 28, ( ( _, ( _, _, RPAREN1right)) :: ( _, ( MlyValue.IDENTIFIER 
IDENTIFIER1, _, _)) :: _ :: ( _, ( _, READ1left, _)) :: rest671)) =>
 let val  result = MlyValue.readcmd (fn _ => let val  (IDENTIFIER as 
IDENTIFIER1) = IDENTIFIER1 ()
 in ((Read_Cmd (Identifier (IDENTIFIER))))
end)
 in ( LrTable.NT 15, ( result, READ1left, RPAREN1right), rest671)
end
|  ( 29, ( ( _, ( _, _, FI1right)) :: ( _, ( MlyValue.commandseq 
commandseq2, _, _)) :: _ :: ( _, ( MlyValue.commandseq commandseq1, _,
 _)) :: _ :: ( _, ( MlyValue.expression expression1, _, _)) :: ( _, (
 _, IF1left, _)) :: rest671)) => let val  result = 
MlyValue.conditionalcmd (fn _ => let val  (expression as expression1)
 = expression1 ()
 val  commandseq1 = commandseq1 ()
 val  commandseq2 = commandseq2 ()
 in ((Condition_Cmd (expression, commandseq1, commandseq2)))
end)
 in ( LrTable.NT 17, ( result, IF1left, FI1right), rest671)
end
|  ( 30, ( ( _, ( _, _, OD1right)) :: ( _, ( MlyValue.commandseq 
commandseq1, _, _)) :: _ :: ( _, ( MlyValue.expression expression1, _,
 _)) :: ( _, ( _, WHILE1left, _)) :: rest671)) => let val  result = 
MlyValue.whilecmd (fn _ => let val  (expression as expression1) = 
expression1 ()
 val  (commandseq as commandseq1) = commandseq1 ()
 in ((While_Cmd (expression, commandseq)))
end)
 in ( LrTable.NT 18, ( result, WHILE1left, OD1right), rest671)
end
|  ( 31, ( ( _, ( _, _, RPAREN1right)) :: ( _, ( 
MlyValue.printexpression printexpression1, _, _)) :: _ :: ( _, ( _, 
PRINT1left, _)) :: rest671)) => let val  result = MlyValue.printcmd
 (fn _ => let val  (printexpression as printexpression1) = 
printexpression1 ()
 in ((Print_Cmd (printexpression)))
end)
 in ( LrTable.NT 16, ( result, PRINT1left, RPAREN1right), rest671)
end
|  ( 32, ( ( _, ( MlyValue.expression expression1, expression1left, 
expression1right)) :: rest671)) => let val  result = 
MlyValue.printexpression (fn _ => let val  (expression as expression1)
 = expression1 ()
 in ((PExp (expression)))
end)
 in ( LrTable.NT 19, ( result, expression1left, expression1right), 
rest671)
end
|  ( 33, ( ( _, ( _, _, RPAREN1right)) :: ( _, ( MlyValue.expression 
expression1, _, _)) :: _ :: ( _, ( _, SHOWRAT1left, _)) :: rest671))
 => let val  result = MlyValue.printexpression (fn _ => let val  (
expression as expression1) = expression1 ()
 in ((Show_Rat (expression)))
end)
 in ( LrTable.NT 19, ( result, SHOWRAT1left, RPAREN1right), rest671)

end
|  ( 34, ( ( _, ( _, _, RPAREN1right)) :: ( _, ( MlyValue.expression 
expression1, _, _)) :: _ :: ( _, ( _, SHOWDECIMAL1left, _)) :: rest671
)) => let val  result = MlyValue.printexpression (fn _ => let val  (
expression as expression1) = expression1 ()
 in ((Show_Decimal (expression)))
end)
 in ( LrTable.NT 19, ( result, SHOWDECIMAL1left, RPAREN1right), 
rest671)
end
|  ( 35, ( ( _, ( _, _, RPAREN1right)) :: ( _, ( MlyValue.expression 
expression1, _, _)) :: _ :: ( _, ( _, TODECIMAL1left, _)) :: rest671))
 => let val  result = MlyValue.printexpression (fn _ => let val  (
expression as expression1) = expression1 ()
 in ((To_Decimal (expression)))
end)
 in ( LrTable.NT 19, ( result, TODECIMAL1left, RPAREN1right), rest671)

end
|  ( 36, ( ( _, ( MlyValue.zeroexpression zeroexpression1, 
zeroexpression1left, zeroexpression1right)) :: rest671)) => let val  
result = MlyValue.expression (fn _ => let val  (zeroexpression as 
zeroexpression1) = zeroexpression1 ()
 in ((zeroexpression))
end)
 in ( LrTable.NT 20, ( result, zeroexpression1left, 
zeroexpression1right), rest671)
end
|  ( 37, ( ( _, ( MlyValue.zeroexpression zeroexpression2, _, 
zeroexpression2right)) :: _ :: ( _, ( MlyValue.zeroexpression 
zeroexpression1, zeroexpression1left, _)) :: rest671)) => let val  
result = MlyValue.expression (fn _ => let val  zeroexpression1 = 
zeroexpression1 ()
 val  zeroexpression2 = zeroexpression2 ()
 in ((Equal (zeroexpression1, zeroexpression2)))
end)
 in ( LrTable.NT 20, ( result, zeroexpression1left, 
zeroexpression2right), rest671)
end
|  ( 38, ( ( _, ( MlyValue.zeroexpression zeroexpression2, _, 
zeroexpression2right)) :: _ :: ( _, ( MlyValue.zeroexpression 
zeroexpression1, zeroexpression1left, _)) :: rest671)) => let val  
result = MlyValue.expression (fn _ => let val  zeroexpression1 = 
zeroexpression1 ()
 val  zeroexpression2 = zeroexpression2 ()
 in ((Not_Equal (zeroexpression1, zeroexpression2)))
end)
 in ( LrTable.NT 20, ( result, zeroexpression1left, 
zeroexpression2right), rest671)
end
|  ( 39, ( ( _, ( MlyValue.zeroexpression zeroexpression2, _, 
zeroexpression2right)) :: _ :: ( _, ( MlyValue.zeroexpression 
zeroexpression1, zeroexpression1left, _)) :: rest671)) => let val  
result = MlyValue.expression (fn _ => let val  zeroexpression1 = 
zeroexpression1 ()
 val  zeroexpression2 = zeroexpression2 ()
 in ((Less (zeroexpression1, zeroexpression2)))
end)
 in ( LrTable.NT 20, ( result, zeroexpression1left, 
zeroexpression2right), rest671)
end
|  ( 40, ( ( _, ( MlyValue.zeroexpression zeroexpression2, _, 
zeroexpression2right)) :: _ :: ( _, ( MlyValue.zeroexpression 
zeroexpression1, zeroexpression1left, _)) :: rest671)) => let val  
result = MlyValue.expression (fn _ => let val  zeroexpression1 = 
zeroexpression1 ()
 val  zeroexpression2 = zeroexpression2 ()
 in ((Greater (zeroexpression1, zeroexpression2)))
end)
 in ( LrTable.NT 20, ( result, zeroexpression1left, 
zeroexpression2right), rest671)
end
|  ( 41, ( ( _, ( MlyValue.zeroexpression zeroexpression2, _, 
zeroexpression2right)) :: _ :: ( _, ( MlyValue.zeroexpression 
zeroexpression1, zeroexpression1left, _)) :: rest671)) => let val  
result = MlyValue.expression (fn _ => let val  zeroexpression1 = 
zeroexpression1 ()
 val  zeroexpression2 = zeroexpression2 ()
 in ((Less_Equal (zeroexpression1, zeroexpression2)))
end)
 in ( LrTable.NT 20, ( result, zeroexpression1left, 
zeroexpression2right), rest671)
end
|  ( 42, ( ( _, ( MlyValue.zeroexpression zeroexpression2, _, 
zeroexpression2right)) :: _ :: ( _, ( MlyValue.zeroexpression 
zeroexpression1, zeroexpression1left, _)) :: rest671)) => let val  
result = MlyValue.expression (fn _ => let val  zeroexpression1 = 
zeroexpression1 ()
 val  zeroexpression2 = zeroexpression2 ()
 in ((Greater_Equal (zeroexpression1, zeroexpression2)))
end)
 in ( LrTable.NT 20, ( result, zeroexpression1left, 
zeroexpression2right), rest671)
end
|  ( 43, ( ( _, ( MlyValue.firstexpression firstexpression1, 
firstexpression1left, firstexpression1right)) :: rest671)) => let val 
 result = MlyValue.zeroexpression (fn _ => let val  (firstexpression
 as firstexpression1) = firstexpression1 ()
 in ((firstexpression))
end)
 in ( LrTable.NT 21, ( result, firstexpression1left, 
firstexpression1right), rest671)
end
|  ( 44, ( ( _, ( MlyValue.secondexpression secondexpression1, _, 
secondexpression1right)) :: _ :: ( _, ( MlyValue.firstexpression 
firstexpression1, firstexpression1left, _)) :: rest671)) => let val  
result = MlyValue.firstexpression (fn _ => let val  (firstexpression
 as firstexpression1) = firstexpression1 ()
 val  (secondexpression as secondexpression1) = secondexpression1 ()
 in ((And_Bool (firstexpression, secondexpression)))
end)
 in ( LrTable.NT 22, ( result, firstexpression1left, 
secondexpression1right), rest671)
end
|  ( 45, ( ( _, ( MlyValue.secondexpression secondexpression1, _, 
secondexpression1right)) :: _ :: ( _, ( MlyValue.firstexpression 
firstexpression1, firstexpression1left, _)) :: rest671)) => let val  
result = MlyValue.firstexpression (fn _ => let val  (firstexpression
 as firstexpression1) = firstexpression1 ()
 val  (secondexpression as secondexpression1) = secondexpression1 ()
 in ((Or_Bool (firstexpression, secondexpression)))
end)
 in ( LrTable.NT 22, ( result, firstexpression1left, 
secondexpression1right), rest671)
end
|  ( 46, ( ( _, ( MlyValue.secondexpression secondexpression1, 
secondexpression1left, secondexpression1right)) :: rest671)) => let
 val  result = MlyValue.firstexpression (fn _ => let val  (
secondexpression as secondexpression1) = secondexpression1 ()
 in ((secondexpression))
end)
 in ( LrTable.NT 22, ( result, secondexpression1left, 
secondexpression1right), rest671)
end
|  ( 47, ( ( _, ( MlyValue.secondexpression secondexpression1, _, 
secondexpression1right)) :: ( _, ( _, NEGATE_BOOL1left, _)) :: rest671
)) => let val  result = MlyValue.secondexpression (fn _ => let val  (
secondexpression as secondexpression1) = secondexpression1 ()
 in ((Neg_Bool (secondexpression)))
end)
 in ( LrTable.NT 23, ( result, NEGATE_BOOL1left, 
secondexpression1right), rest671)
end
|  ( 48, ( ( _, ( MlyValue.thirdexpression thirdexpression1, 
thirdexpression1left, thirdexpression1right)) :: rest671)) => let val 
 result = MlyValue.secondexpression (fn _ => let val  (thirdexpression
 as thirdexpression1) = thirdexpression1 ()
 in ((thirdexpression))
end)
 in ( LrTable.NT 23, ( result, thirdexpression1left, 
thirdexpression1right), rest671)
end
|  ( 49, ( ( _, ( MlyValue.fourthexpression fourthexpression1, _, 
fourthexpression1right)) :: _ :: ( _, ( MlyValue.thirdexpression 
thirdexpression1, thirdexpression1left, _)) :: rest671)) => let val  
result = MlyValue.thirdexpression (fn _ => let val  (thirdexpression
 as thirdexpression1) = thirdexpression1 ()
 val  (fourthexpression as fourthexpression1) = fourthexpression1 ()
 in ((Add_Int (thirdexpression, fourthexpression)))
end)
 in ( LrTable.NT 24, ( result, thirdexpression1left, 
fourthexpression1right), rest671)
end
|  ( 50, ( ( _, ( MlyValue.fourthexpression fourthexpression1, _, 
fourthexpression1right)) :: _ :: ( _, ( MlyValue.thirdexpression 
thirdexpression1, thirdexpression1left, _)) :: rest671)) => let val  
result = MlyValue.thirdexpression (fn _ => let val  (thirdexpression
 as thirdexpression1) = thirdexpression1 ()
 val  (fourthexpression as fourthexpression1) = fourthexpression1 ()
 in ((Add_Rat (thirdexpression, fourthexpression)))
end)
 in ( LrTable.NT 24, ( result, thirdexpression1left, 
fourthexpression1right), rest671)
end
|  ( 51, ( ( _, ( MlyValue.fourthexpression fourthexpression1, _, 
fourthexpression1right)) :: _ :: ( _, ( MlyValue.thirdexpression 
thirdexpression1, thirdexpression1left, _)) :: rest671)) => let val  
result = MlyValue.thirdexpression (fn _ => let val  (thirdexpression
 as thirdexpression1) = thirdexpression1 ()
 val  (fourthexpression as fourthexpression1) = fourthexpression1 ()
 in ((Sub_Int (thirdexpression, fourthexpression)))
end)
 in ( LrTable.NT 24, ( result, thirdexpression1left, 
fourthexpression1right), rest671)
end
|  ( 52, ( ( _, ( MlyValue.fourthexpression fourthexpression1, _, 
fourthexpression1right)) :: _ :: ( _, ( MlyValue.thirdexpression 
thirdexpression1, thirdexpression1left, _)) :: rest671)) => let val  
result = MlyValue.thirdexpression (fn _ => let val  (thirdexpression
 as thirdexpression1) = thirdexpression1 ()
 val  (fourthexpression as fourthexpression1) = fourthexpression1 ()
 in ((Sub_Rat (thirdexpression, fourthexpression)))
end)
 in ( LrTable.NT 24, ( result, thirdexpression1left, 
fourthexpression1right), rest671)
end
|  ( 53, ( ( _, ( MlyValue.fourthexpression fourthexpression1, 
fourthexpression1left, fourthexpression1right)) :: rest671)) => let
 val  result = MlyValue.thirdexpression (fn _ => let val  (
fourthexpression as fourthexpression1) = fourthexpression1 ()
 in ((fourthexpression))
end)
 in ( LrTable.NT 24, ( result, fourthexpression1left, 
fourthexpression1right), rest671)
end
|  ( 54, ( ( _, ( MlyValue.fifthexpression fifthexpression1, _, 
fifthexpression1right)) :: _ :: ( _, ( MlyValue.fourthexpression 
fourthexpression1, fourthexpression1left, _)) :: rest671)) => let val 
 result = MlyValue.fourthexpression (fn _ => let val  (
fourthexpression as fourthexpression1) = fourthexpression1 ()
 val  (fifthexpression as fifthexpression1) = fifthexpression1 ()
 in ((Mul_Int (fourthexpression, fifthexpression)))
end)
 in ( LrTable.NT 25, ( result, fourthexpression1left, 
fifthexpression1right), rest671)
end
|  ( 55, ( ( _, ( MlyValue.fifthexpression fifthexpression1, _, 
fifthexpression1right)) :: _ :: ( _, ( MlyValue.fourthexpression 
fourthexpression1, fourthexpression1left, _)) :: rest671)) => let val 
 result = MlyValue.fourthexpression (fn _ => let val  (
fourthexpression as fourthexpression1) = fourthexpression1 ()
 val  (fifthexpression as fifthexpression1) = fifthexpression1 ()
 in ((Mul_Rat (fourthexpression, fifthexpression)))
end)
 in ( LrTable.NT 25, ( result, fourthexpression1left, 
fifthexpression1right), rest671)
end
|  ( 56, ( ( _, ( MlyValue.fifthexpression fifthexpression1, _, 
fifthexpression1right)) :: _ :: ( _, ( MlyValue.fourthexpression 
fourthexpression1, fourthexpression1left, _)) :: rest671)) => let val 
 result = MlyValue.fourthexpression (fn _ => let val  (
fourthexpression as fourthexpression1) = fourthexpression1 ()
 val  (fifthexpression as fifthexpression1) = fifthexpression1 ()
 in ((Div_Int (fourthexpression, fifthexpression)))
end)
 in ( LrTable.NT 25, ( result, fourthexpression1left, 
fifthexpression1right), rest671)
end
|  ( 57, ( ( _, ( MlyValue.fifthexpression fifthexpression1, _, 
fifthexpression1right)) :: _ :: ( _, ( MlyValue.fourthexpression 
fourthexpression1, fourthexpression1left, _)) :: rest671)) => let val 
 result = MlyValue.fourthexpression (fn _ => let val  (
fourthexpression as fourthexpression1) = fourthexpression1 ()
 val  (fifthexpression as fifthexpression1) = fifthexpression1 ()
 in ((Div_Rat (fourthexpression, fifthexpression)))
end)
 in ( LrTable.NT 25, ( result, fourthexpression1left, 
fifthexpression1right), rest671)
end
|  ( 58, ( ( _, ( MlyValue.fifthexpression fifthexpression1, _, 
fifthexpression1right)) :: _ :: ( _, ( MlyValue.fourthexpression 
fourthexpression1, fourthexpression1left, _)) :: rest671)) => let val 
 result = MlyValue.fourthexpression (fn _ => let val  (
fourthexpression as fourthexpression1) = fourthexpression1 ()
 val  (fifthexpression as fifthexpression1) = fifthexpression1 ()
 in ((Mod_Int (fourthexpression, fifthexpression)))
end)
 in ( LrTable.NT 25, ( result, fourthexpression1left, 
fifthexpression1right), rest671)
end
|  ( 59, ( ( _, ( MlyValue.fifthexpression fifthexpression1, 
fifthexpression1left, fifthexpression1right)) :: rest671)) => let val 
 result = MlyValue.fourthexpression (fn _ => let val  (fifthexpression
 as fifthexpression1) = fifthexpression1 ()
 in ((fifthexpression))
end)
 in ( LrTable.NT 25, ( result, fifthexpression1left, 
fifthexpression1right), rest671)
end
|  ( 60, ( ( _, ( MlyValue.fifthexpression fifthexpression1, _, 
fifthexpression1right)) :: ( _, ( _, PLUS_SIGN1left, _)) :: rest671))
 => let val  result = MlyValue.fifthexpression (fn _ => let val  (
fifthexpression as fifthexpression1) = fifthexpression1 ()
 in ((Positive (fifthexpression)))
end)
 in ( LrTable.NT 26, ( result, PLUS_SIGN1left, fifthexpression1right),
 rest671)
end
|  ( 61, ( ( _, ( MlyValue.fifthexpression fifthexpression1, _, 
fifthexpression1right)) :: ( _, ( _, MINUS_SIGN1left, _)) :: rest671))
 => let val  result = MlyValue.fifthexpression (fn _ => let val  (
fifthexpression as fifthexpression1) = fifthexpression1 ()
 in ((Negative (fifthexpression)))
end)
 in ( LrTable.NT 26, ( result, MINUS_SIGN1left, fifthexpression1right)
, rest671)
end
|  ( 62, ( ( _, ( MlyValue.fifthexpression fifthexpression1, _, 
fifthexpression1right)) :: ( _, ( _, INVERSE1left, _)) :: rest671)) =>
 let val  result = MlyValue.fifthexpression (fn _ => let val  (
fifthexpression as fifthexpression1) = fifthexpression1 ()
 in ((Inverse (fifthexpression)))
end)
 in ( LrTable.NT 26, ( result, INVERSE1left, fifthexpression1right), 
rest671)
end
|  ( 63, ( ( _, ( MlyValue.sixthexpression sixthexpression1, 
sixthexpression1left, sixthexpression1right)) :: rest671)) => let val 
 result = MlyValue.fifthexpression (fn _ => let val  (sixthexpression
 as sixthexpression1) = sixthexpression1 ()
 in ((sixthexpression))
end)
 in ( LrTable.NT 26, ( result, sixthexpression1left, 
sixthexpression1right), rest671)
end
|  ( 64, ( ( _, ( MlyValue.RATION RATION1, RATION1left, RATION1right))
 :: rest671)) => let val  result = MlyValue.sixthexpression (fn _ =>
 let val  (RATION as RATION1) = RATION1 ()
 in ((Exp_Rat ( Ration (RATION))))
end)
 in ( LrTable.NT 27, ( result, RATION1left, RATION1right), rest671)

end
|  ( 65, ( ( _, ( MlyValue.INTEG INTEG1, INTEG1left, INTEG1right)) :: 
rest671)) => let val  result = MlyValue.sixthexpression (fn _ => let
 val  (INTEG as INTEG1) = INTEG1 ()
 in ((Exp_Int ( Integ (INTEG))))
end)
 in ( LrTable.NT 27, ( result, INTEG1left, INTEG1right), rest671)
end
|  ( 66, ( ( _, ( MlyValue.BOOLEAN BOOLEAN1, BOOLEAN1left, 
BOOLEAN1right)) :: rest671)) => let val  result = 
MlyValue.sixthexpression (fn _ => let val  (BOOLEAN as BOOLEAN1) = 
BOOLEAN1 ()
 in ((Exp_Bool ( Boolean (BOOLEAN))))
end)
 in ( LrTable.NT 27, ( result, BOOLEAN1left, BOOLEAN1right), rest671)

end
|  ( 67, ( ( _, ( _, _, RPAREN1right)) :: ( _, ( MlyValue.expression 
expression1, _, _)) :: ( _, ( _, LPAREN1left, _)) :: rest671)) => let
 val  result = MlyValue.sixthexpression (fn _ => let val  (expression
 as expression1) = expression1 ()
 in ((expression))
end)
 in ( LrTable.NT 27, ( result, LPAREN1left, RPAREN1right), rest671)

end
|  ( 68, ( ( _, ( _, _, RPAREN1right)) :: ( _, ( MlyValue.expression 
expression2, _, _)) :: _ :: ( _, ( MlyValue.expression expression1, _,
 _)) :: _ :: ( _, ( _, MAKE_RAT1left, _)) :: rest671)) => let val  
result = MlyValue.sixthexpression (fn _ => let val  expression1 = 
expression1 ()
 val  expression2 = expression2 ()
 in ((Make_Rat (expression1, expression2)))
end)
 in ( LrTable.NT 27, ( result, MAKE_RAT1left, RPAREN1right), rest671)

end
|  ( 69, ( ( _, ( _, _, RPAREN1right)) :: ( _, ( MlyValue.expression 
expression1, _, _)) :: _ :: ( _, ( _, RAT1left, _)) :: rest671)) =>
 let val  result = MlyValue.sixthexpression (fn _ => let val  (
expression as expression1) = expression1 ()
 in ((Rat (expression)))
end)
 in ( LrTable.NT 27, ( result, RAT1left, RPAREN1right), rest671)
end
|  ( 70, ( ( _, ( _, _, RPAREN1right)) :: ( _, ( MlyValue.expression 
expression1, _, _)) :: _ :: ( _, ( _, FROMDECIMAL1left, _)) :: rest671
)) => let val  result = MlyValue.sixthexpression (fn _ => let val  (
expression as expression1) = expression1 ()
 in ((FromDecimal (expression)))
end)
 in ( LrTable.NT 27, ( result, FROMDECIMAL1left, RPAREN1right), 
rest671)
end
|  ( 71, ( ( _, ( MlyValue.IDENTIFIER IDENTIFIER1, IDENTIFIER1left, 
IDENTIFIER1right)) :: rest671)) => let val  result = 
MlyValue.sixthexpression (fn _ => let val  (IDENTIFIER as IDENTIFIER1)
 = IDENTIFIER1 ()
 in ((Exp_Ident (Identifier (IDENTIFIER))))
end)
 in ( LrTable.NT 27, ( result, IDENTIFIER1left, IDENTIFIER1right), 
rest671)
end
| _ => raise (mlyAction i392)
end
val void = MlyValue.VOID
val extract = fn a => (fn MlyValue.program x => x
| _ => let exception ParseInternal
	in raise ParseInternal end) a ()
end
end
structure Tokens : Rational_PL0_TOKENS =
struct
type svalue = ParserData.svalue
type ('a,'b) token = ('a,'b) Token.token
fun RATION (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 0,(
ParserData.MlyValue.RATION (fn () => i),p1,p2))
fun INTEG (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 1,(
ParserData.MlyValue.INTEG (fn () => i),p1,p2))
fun BOOLEAN (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 2,(
ParserData.MlyValue.BOOLEAN (fn () => i),p1,p2))
fun VAR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 3,(
ParserData.MlyValue.VOID,p1,p2))
fun IF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 4,(
ParserData.MlyValue.VOID,p1,p2))
fun THEN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 5,(
ParserData.MlyValue.VOID,p1,p2))
fun ELSE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 6,(
ParserData.MlyValue.VOID,p1,p2))
fun FI (p1,p2) = Token.TOKEN (ParserData.LrTable.T 7,(
ParserData.MlyValue.VOID,p1,p2))
fun WHILE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 8,(
ParserData.MlyValue.VOID,p1,p2))
fun DO (p1,p2) = Token.TOKEN (ParserData.LrTable.T 9,(
ParserData.MlyValue.VOID,p1,p2))
fun OD (p1,p2) = Token.TOKEN (ParserData.LrTable.T 10,(
ParserData.MlyValue.VOID,p1,p2))
fun PROCEDURE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 11,(
ParserData.MlyValue.VOID,p1,p2))
fun PRINT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 12,(
ParserData.MlyValue.VOID,p1,p2))
fun READ (p1,p2) = Token.TOKEN (ParserData.LrTable.T 13,(
ParserData.MlyValue.VOID,p1,p2))
fun CALL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 14,(
ParserData.MlyValue.VOID,p1,p2))
fun INVERSE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 15,(
ParserData.MlyValue.VOID,p1,p2))
fun MAKE_RAT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 16,(
ParserData.MlyValue.VOID,p1,p2))
fun RAT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 17,(
ParserData.MlyValue.VOID,p1,p2))
fun SHOWRAT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 18,(
ParserData.MlyValue.VOID,p1,p2))
fun SHOWDECIMAL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 19,(
ParserData.MlyValue.VOID,p1,p2))
fun FROMDECIMAL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 20,(
ParserData.MlyValue.VOID,p1,p2))
fun TODECIMAL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 21,(
ParserData.MlyValue.VOID,p1,p2))
fun MINUS_SIGN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 22,(
ParserData.MlyValue.VOID,p1,p2))
fun PLUS_SIGN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 23,(
ParserData.MlyValue.VOID,p1,p2))
fun SUBTRACT_INT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 24,(
ParserData.MlyValue.VOID,p1,p2))
fun ADD_RAT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 25,(
ParserData.MlyValue.VOID,p1,p2))
fun SUBTRACT_RAT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 26,(
ParserData.MlyValue.VOID,p1,p2))
fun MULTIPLY_RAT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 27,(
ParserData.MlyValue.VOID,p1,p2))
fun DIVIDE_RAT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 28,(
ParserData.MlyValue.VOID,p1,p2))
fun MULTIPLY_INT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 29,(
ParserData.MlyValue.VOID,p1,p2))
fun DIVIDE_INT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 30,(
ParserData.MlyValue.VOID,p1,p2))
fun MOD_INT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 31,(
ParserData.MlyValue.VOID,p1,p2))
fun NEGATE_BOOL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 32,(
ParserData.MlyValue.VOID,p1,p2))
fun AND_BOOL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 33,(
ParserData.MlyValue.VOID,p1,p2))
fun OR_BOOL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 34,(
ParserData.MlyValue.VOID,p1,p2))
fun EQUAL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 35,(
ParserData.MlyValue.VOID,p1,p2))
fun NOT_EQUAL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 36,(
ParserData.MlyValue.VOID,p1,p2))
fun LESS (p1,p2) = Token.TOKEN (ParserData.LrTable.T 37,(
ParserData.MlyValue.VOID,p1,p2))
fun LESS_EQUAL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 38,(
ParserData.MlyValue.VOID,p1,p2))
fun GREATER (p1,p2) = Token.TOKEN (ParserData.LrTable.T 39,(
ParserData.MlyValue.VOID,p1,p2))
fun GREATER_EQUAL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 40,(
ParserData.MlyValue.VOID,p1,p2))
fun ASSIGNMENT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 41,(
ParserData.MlyValue.VOID,p1,p2))
fun LPAREN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 42,(
ParserData.MlyValue.VOID,p1,p2))
fun RPAREN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 43,(
ParserData.MlyValue.VOID,p1,p2))
fun LCURLYBRACE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 44,(
ParserData.MlyValue.VOID,p1,p2))
fun RCURLYBRACE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 45,(
ParserData.MlyValue.VOID,p1,p2))
fun EOS (p1,p2) = Token.TOKEN (ParserData.LrTable.T 46,(
ParserData.MlyValue.VOID,p1,p2))
fun COMMA (p1,p2) = Token.TOKEN (ParserData.LrTable.T 47,(
ParserData.MlyValue.VOID,p1,p2))
fun IDENTIFIER (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 48,(
ParserData.MlyValue.IDENTIFIER (fn () => i),p1,p2))
fun COMMENT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 49,(
ParserData.MlyValue.VOID,p1,p2))
fun EOF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 50,(
ParserData.MlyValue.VOID,p1,p2))
fun RATIONAL_RES (p1,p2) = Token.TOKEN (ParserData.LrTable.T 51,(
ParserData.MlyValue.VOID,p1,p2))
fun INTEGER_RES (p1,p2) = Token.TOKEN (ParserData.LrTable.T 52,(
ParserData.MlyValue.VOID,p1,p2))
fun BOOLEAN_RES (p1,p2) = Token.TOKEN (ParserData.LrTable.T 53,(
ParserData.MlyValue.VOID,p1,p2))
fun BAD_CHARACTER (p1,p2) = Token.TOKEN (ParserData.LrTable.T 54,(
ParserData.MlyValue.VOID,p1,p2))
end
end
